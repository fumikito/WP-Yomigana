{"version":3,"sources":["editor_plugin.js"],"names":["tinymce","PluginManager","add","editor","url","WrapWithSimpleTag","tagName","target","selection","getNode","newDom","nodeName","createTextNode","toUpperCase","innerHTML","dom","replace","document","getContent","setHTML","create","addButton","image","WpYomigana","imageBase","type","tooltip","dl","stateSelector","menu","dlToggle","data","text","dtToggle","onselect","control","e","settings","getParent","node","parent","is","rename","execCommand","onclick","onClick","cite","q","s","jQuery","window","WpYomiganaHelper","find","getAttrib","val","$modal","action","citeText","origText","createElement","newQ","appendChild","setAttrib","ruby","rts","rt","firstChild","nodeValue","select","this","rubyText","rubyBody","newRt","newRuby"],"mappings":"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","file":"../editor_plugin.js","sourcesContent":["/**\n * TinyMCE plugin for WP-Yomigana\n *\n * @author Hametuha inc.\n * @package wp-yomigana\n */\n\n/*global tinymce: true*/\n/*global WpYomigana: true*/\n\ntinymce.PluginManager.add('yomigana', function(editor, url) {\n\n    /**\n     * Wrap string with single value\n     * @param editor\n     * @param tagName\n     * @return {Object}\n     */\n    function WrapWithSimpleTag(editor, tagName){\n        let target = editor.selection.getNode(),\n            newDom;\n        if( target.nodeName == tagName.toUpperCase() ){\n            // If this node is small, unwrap.\n            newDom = document.createTextNode(target.innerHTML);\n            editor.dom.replace(newDom, target, false);\n        }else if( editor.selection.getContent().length > 0 ){\n            // If letters selected, wrap it\n            newDom = editor.dom.create(tagName);\n            editor.dom.setHTML(newDom, editor.selection.getContent());\n            editor.selection.setNode(newDom);\n        }\n        return newDom;\n    }\n\n\n\n    //\n    // DL Button\n    //\n    // -----------------------\n    //\n\n    editor.addButton('dl', {\n        image: WpYomigana.imageBase + 'dl-2.png',\n        type: 'splitbutton',\n        tooltip: WpYomigana.dl,\n        stateSelector: 'dl',\n        menu: [{\n                   text: WpYomigana.dlToggle,\n                   data: 'list'\n               },\n               {\n                    text: WpYomigana.dtToggle,\n                    data: 'toggle'\n               }],\n        onselect: function(e) {\n            switch( e.control.settings.data ){\n                case 'toggle':\n                    // Switch dt to dd, dd to dt.\n                    let node = editor.selection.getNode(),\n                        dl   = editor.dom.getParent(node, 'dl'),\n                        target, tagName, parent;\n                    if( !dl ){\n                        return;\n                    }\n                    if( editor.dom.is(node, 'dt') ){\n                        target = node;\n                        tagName = 'dd';\n                    }else if( editor.dom.is(node, 'dd') ){\n                        target = node;\n                        tagName = 'dt';\n                    }else if( ( parent = editor.dom.getParent(node, 'dt', dl)) ){\n                        target = parent;\n                        tagName = 'dd';\n                    }else if( ( parent = editor.dom.getParent(node, 'dd', dl)) ){\n                        target = parent;\n                        tagName = 'dt';\n                    }else{\n                        // This is not dl\n                        return;\n                    }\n                    editor.dom.rename(target, tagName);\n                    break;\n                default:\n                    editor.execCommand('InsertDefinitionList');\n                    break;\n            }\n        },\n        onclick: function() {\n            editor.execCommand('InsertDefinitionList');\n        }\n    });\n\n    //\n    // small button\n    //\n    // -----------------------\n    //\n    editor.addButton('small', {\n        image: WpYomigana.imageBase + 'small-2.png',\n        tooltip: WpYomigana.small,\n        stateSelector: 'small',\n        onClick: function(){\n            WrapWithSimpleTag(editor, 'small');\n        }\n    });\n\n\n    //\n    // Cite Button\n    //\n    // -----------------------\n    //\n    editor.addButton('cite', {\n        image: WpYomigana.imageBase + 'cite-2.png',\n        tooltip: WpYomigana.cite,\n        stateSelector: 'cite',\n        onClick: function(){\n            WrapWithSimpleTag(editor, 'cite');\n        }\n    });\n\n    //\n    // q Button\n    //\n    // -----------------------\n    //\n    editor.addButton('q', {\n        image: WpYomigana.imageBase + 'q-2.png',\n        tooltip: WpYomigana.q,\n        stateSelector: 'q',\n        onClick: function(){\n            let s = editor.selection.getNode(),\n                create = false,\n                text = '',\n                q, parent, cite;\n            if( editor.dom.is(s, \"q\") ){\n                q = s;\n                text = jQuery(q).text();\n            }else if( (parent = editor.dom.getParent(s, 'q') ) ){\n                q = parent;\n                text = jQuery(q).text();\n            }else{\n                create = true;\n                text = editor.selection.getContent();\n            }\n            cite = editor.dom.getAttrib(q, 'cite', '');\n            window.WpYomiganaHelper.q(WpYomigana.q, function(){\n                jQuery(this).find('#citeText').val(text);\n                jQuery(this).find('#citeFrom').val(cite);\n            }, function($modal, action){\n                switch( action ){\n                    case 'set':\n                        let origText = $modal.find('#citeText').val(),\n                            citeText = $modal.find('#citeFrom').val();\n                        if( create ){\n                            // This is first\n                            let newQ = document.createElement('q');\n                            newQ.appendChild(document.createTextNode(origText));\n                            newQ.cite = citeText;\n                            editor.selection.setNode(newQ);\n                        }else{\n                            // Already exist\n                            editor.dom.setAttrib(q, 'cite', citeText);\n                        }\n                        break;\n                    case 'remove':\n                        if( !create ){\n                            // Remove tag\n                            editor.dom.replace(document.createTextNode(text), q, false);\n                        }\n                        break;\n                    default:\n                        // Do nothing\n                        break;\n                }\n            });\n        }\n    });\n\n\n\n    //\n    // ruby Button\n    //\n    // -----------------------\n    //\n    editor.addButton('ruby', {\n        image: WpYomigana.imageBase + 'ruby-2.png',\n        tooltip: WpYomigana.ruby,\n        stateSelector: 'ruby',\n        onClick: function(){\n            let s = editor.selection.getNode(),\n                create = false,\n                text = '',\n                ruby, parent, rt = false, rts;\n            if( editor.dom.is(s, \"ruby\") ){\n                ruby = s;\n                text = ruby.firstChild.nodeValue;\n            }else if( (parent = editor.dom.getParent(s, 'ruby') ) ){\n                ruby = parent;\n                text = ruby.firstChild.nodeValue;\n            }else{\n                create = true;\n                text = editor.selection.getContent();\n            }\n            rts = editor.dom.select('rt', ruby);\n            if(ruby && rts){\n                rt = rts[0];\n            }\n            window.WpYomiganaHelper.ruby(WpYomigana.ruby, function(){\n                jQuery(this).find('#rubyBody').val(text);\n                jQuery(this).find('#rubyText').val(rt ? rt.firstChild.nodeValue : '');\n            }, function($modal, action){\n                switch( action ){\n                    case 'set':\n                        let rubyBody = $modal.find('#rubyBody').val(),\n                            rubyText = $modal.find('#rubyText').val();\n                        if( create ){\n                            // This is first\n                            let newRuby = document.createElement('ruby');\n                            newRuby.appendChild(document.createTextNode(rubyBody));\n                            let newRt = document.createElement('rt');\n                            newRt.appendChild(document.createTextNode(rubyText));\n                            newRuby.appendChild(newRt);\n                            editor.selection.setNode(newRuby);\n                        }else{\n                            // Already exist\n                            ruby.firstChild.nodeValue = rubyBody;\n                            rt.firstChild.nodeValue = rubyText;\n                        }\n                        break;\n                    case 'remove':\n                        if( !create ){\n                            // Remove tag\n                            editor.dom.replace(document.createTextNode(text), ruby, false);\n                        }\n                        break;\n                    default:\n                        // Do nothing\n                        break;\n                }\n            });\n        }\n    });\n});\n"]}