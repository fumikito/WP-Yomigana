{"version":3,"sources":["editor_plugin.js"],"names":["tinymce","PluginManager","add","editor","url","WrapWithSimpleTag","tagName","target","selection","newDom","nodeName","toUpperCase","innerHTML","dom","replace","document","createTextNode","getContent","setHTML","create","addButton","image","WpYomigana","imageBase","type","tooltip","dl","stateSelector","menu","dlToggle","data","text","dtToggle","onselect","control","settings","e","parent","getParent","getNode","node","is","rename","execCommand","onclick","small","onClick","cite","q","s","jQuery","getAttrib","WpYomiganaHelper","val","this","find","$modal","action","origText","citeText","newQ","createElement","appendChild","setNode","setAttrib","ruby","rts","firstChild","nodeValue","select","rt","window","rubyBody","rubyText","newRuby","newRt"],"mappings":"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","file":"../editor_plugin.js","sourcesContent":["/**\n * TinyMCE plugin for WP-Yomigana\n *\n * @author Hametuha inc.\n * @package wp-yomigana\n */\n\n/*global tinymce: true*/\n/*global WpYomigana: true*/\n\ntinymce.PluginManager.add('yomigana', function(editor, url) {\n\n    /**\n     * Wrap string with single value\n     * @param editor\n     * @param tagName\n     * @return {Object}\n     */\n    function WrapWithSimpleTag(editor, tagName){\n        let target = editor.selection.getNode(),\n            newDom;\n        if( target.nodeName == tagName.toUpperCase() ){\n            // If this node is small, unwrap.\n            newDom = document.createTextNode(target.innerHTML);\n            editor.dom.replace(newDom, target, false);\n        }else if( editor.selection.getContent().length > 0 ){\n            // If letters selected, wrap it\n            newDom = editor.dom.create(tagName);\n            editor.dom.setHTML(newDom, editor.selection.getContent());\n            editor.selection.setNode(newDom);\n        }\n        return newDom;\n    }\n\n\n\n    //\n    // DL Button\n    //\n    // -----------------------\n    //\n\n    editor.addButton('dl', {\n        image: WpYomigana.imageBase + 'dl-2.png',\n        type: 'splitbutton',\n        tooltip: WpYomigana.dl,\n        stateSelector: 'dl',\n        menu: [{\n                   text: WpYomigana.dlToggle,\n                   data: 'list'\n               },\n               {\n                    text: WpYomigana.dtToggle,\n                    data: 'toggle'\n               }],\n        onselect: function(e) {\n            switch( e.control.settings.data ){\n                case 'toggle':\n                    // Switch dt to dd, dd to dt.\n                    let node = editor.selection.getNode(),\n                        dl   = editor.dom.getParent(node, 'dl'),\n                        target, tagName, parent;\n                    if( !dl ){\n                        return;\n                    }\n                    if( editor.dom.is(node, 'dt') ){\n                        target = node;\n                        tagName = 'dd';\n                    }else if( editor.dom.is(node, 'dd') ){\n                        target = node;\n                        tagName = 'dt';\n                    }else if( ( parent = editor.dom.getParent(node, 'dt', dl)) ){\n                        target = parent;\n                        tagName = 'dd';\n                    }else if( ( parent = editor.dom.getParent(node, 'dd', dl)) ){\n                        target = parent;\n                        tagName = 'dt';\n                    }else{\n                        // This is not dl\n                        return;\n                    }\n                    editor.dom.rename(target, tagName);\n                    break;\n                default:\n                    editor.execCommand('InsertDefinitionList');\n                    break;\n            }\n        },\n        onclick: function() {\n            editor.execCommand('InsertDefinitionList');\n        }\n    });\n\n    //\n    // small button\n    //\n    // -----------------------\n    //\n    editor.addButton('small', {\n        image: WpYomigana.imageBase + 'small-2.png',\n        tooltip: WpYomigana.small,\n        stateSelector: 'small',\n        onClick: function(){\n            WrapWithSimpleTag(editor, 'small');\n        }\n    });\n\n\n    //\n    // Cite Button\n    //\n    // -----------------------\n    //\n    editor.addButton('cite', {\n        image: WpYomigana.imageBase + 'cite-2.png',\n        tooltip: WpYomigana.cite,\n        stateSelector: 'cite',\n        onClick: function(){\n            WrapWithSimpleTag(editor, 'cite');\n        }\n    });\n\n    //\n    // q Button\n    //\n    // -----------------------\n    //\n    editor.addButton('q', {\n        image: WpYomigana.imageBase + 'q-2.png',\n        tooltip: WpYomigana.q,\n        stateSelector: 'q',\n        onClick: function(){\n            let s = editor.selection.getNode(),\n                create = false,\n                text = '',\n                q, parent, cite;\n            if( editor.dom.is(s, \"q\") ){\n                q = s;\n                text = jQuery(q).text();\n            }else if( (parent = editor.dom.getParent(s, 'q') ) ){\n                q = parent;\n                text = jQuery(q).text();\n            }else{\n                create = true;\n                text = editor.selection.getContent();\n            }\n            cite = editor.dom.getAttrib(q, 'cite', '');\n            window.WpYomiganaHelper.q(WpYomigana.q, function(){\n                jQuery(this).find('#citeText').val(text);\n                jQuery(this).find('#citeFrom').val(cite);\n            }, function($modal, action){\n                switch( action ){\n                    case 'set':\n                        let origText = $modal.find('#citeText').val(),\n                            citeText = $modal.find('#citeFrom').val();\n                        if( create ){\n                            // This is first\n                            let newQ = document.createElement('q');\n                            newQ.appendChild(document.createTextNode(origText));\n                            newQ.cite = citeText;\n                            editor.selection.setNode(newQ);\n                        }else{\n                            // Already exist\n                            editor.dom.setAttrib(q, 'cite', citeText);\n                        }\n                        break;\n                    case 'remove':\n                        if( !create ){\n                            // Remove tag\n                            editor.dom.replace(document.createTextNode(text), q, false);\n                        }\n                        break;\n                    default:\n                        // Do nothing\n                        break;\n                }\n            });\n        }\n    });\n\n\n\n    //\n    // ruby Button\n    //\n    // -----------------------\n    //\n    editor.addButton('ruby', {\n        image: WpYomigana.imageBase + 'ruby-2.png',\n        tooltip: WpYomigana.ruby,\n        stateSelector: 'ruby',\n        onClick: function(){\n            let s = editor.selection.getNode(),\n                create = false,\n                text = '',\n                ruby, parent, rt = false, rts;\n            if( editor.dom.is(s, \"ruby\") ){\n                ruby = s;\n                text = ruby.firstChild.nodeValue;\n            }else if( (parent = editor.dom.getParent(s, 'ruby') ) ){\n                ruby = parent;\n                text = ruby.firstChild.nodeValue;\n            }else{\n                create = true;\n                text = editor.selection.getContent();\n            }\n            rts = editor.dom.select('rt', ruby);\n            if(ruby && rts){\n                rt = rts[0];\n            }\n            window.WpYomiganaHelper.ruby(WpYomigana.ruby, function(){\n                jQuery(this).find('#rubyBody').val(text);\n                jQuery(this).find('#rubyText').val(rt ? rt.firstChild.nodeValue : '');\n            }, function($modal, action){\n                switch( action ){\n                    case 'set':\n                        let rubyBody = $modal.find('#rubyBody').val(),\n                            rubyText = $modal.find('#rubyText').val();\n                        if( create ){\n                            // This is first\n                            let newRuby = document.createElement('ruby');\n                            newRuby.appendChild(document.createTextNode(rubyBody));\n                            let newRt = document.createElement('rt');\n                            newRt.appendChild(document.createTextNode(rubyText));\n                            newRuby.appendChild(newRt);\n                            editor.selection.setNode(newRuby);\n                        }else{\n                            // Already exist\n                            ruby.firstChild.nodeValue = rubyBody;\n                            rt.firstChild.nodeValue = rubyText;\n                        }\n                        break;\n                    case 'remove':\n                        if( !create ){\n                            // Remove tag\n                            editor.dom.replace(document.createTextNode(text), ruby, false);\n                        }\n                        break;\n                    default:\n                        // Do nothing\n                        break;\n                }\n            });\n        }\n    });\n});\n"]}